// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  phone     String?
  location  String?
  title     String?
  company   String?
  experience String?
  education String?
  university String?
  graduationYear String?
  bio       String?  @db.Text
  skills    String?  @db.Text // JSON array of skills
  website   String?
  linkedin  String?
  github    String?
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  applications Application[]
  savedJobs   SavedJob[]
  profile     Profile?

  @@map("users")
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  avatar    String?
  coverPhoto String?
  resume    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Job {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String
  type        JobType
  salary      String?
  description String   @db.Text
  requirements String  @db.Text
  benefits    String?  @db.Text
  logo        String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  views       Int      @default(0)
  applications Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  applications Application[]
  savedJobs   SavedJob[]

  @@map("jobs")
}

model Application {
  id        String           @id @default(cuid())
  userId    String
  jobId     String
  status    ApplicationStatus @default(APPLIED)
  coverLetter String?        @db.Text
  resume    String?
  appliedAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@map("applications")
}

model SavedJob {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  savedAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@map("saved_jobs")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  jobCount    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

enum Role {
  USER
  ADMIN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum ApplicationStatus {
  APPLIED
  UNDER_REVIEW
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFER_EXTENDED
  HIRED
  REJECTED
  WITHDRAWN
} 